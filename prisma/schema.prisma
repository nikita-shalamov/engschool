datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  phoneNumber   String
  name          String
  password      String
  image         String?
  referralCode  String?      @unique
  profileType   ProfileTypes @relation(fields: [profileTypeId], references: [id])
  profileTypeId Int

  // Репетитор -> ученики
  tutorStudents TutorStudent[] @relation("tutorToStudent")

  // Ученик -> репетиторы
  studentTutors TutorStudent[] @relation("StudentToTutor")

  // Домашние задания, где пользователь является преподавателем
  tutorHomework Homework[] @relation("HomeworkTutor")

  // Домашние задания, где пользователь является студентом
  studentHomework Homework[] @relation("HomeworkStudent")

   // Домашние задания, где пользователь является преподавателем
  tutorLesson Lessons[] @relation("TutorLesson")

  // Домашние задания, где пользователь является студентом
  studentLesson Lessons[] @relation("StudentLesson")

  @@unique([phoneNumber, profileTypeId])
}

model ProfileTypes {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model TutorStudent {
  id Int @id @default(autoincrement())
  lessonLink String?

  // Репетитор
  tutor   User @relation(name: "tutorToStudent", fields: [tutorId], references: [id])
  tutorId Int

  // Ученик
  student   User @relation(name: "StudentToTutor", fields: [studentId], references: [id])
  studentId Int

  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([tutorId, studentId])
}

model Homework {
  id    Int      @id @default(autoincrement())
  title String
  text  String
  date  DateTime // Дата домашнего задания
  fileNames String[] // Массив строк для хранения оригинальных имен файлов
  fileRandomNames String[] // Массив строк для хранения путей к файлам

  // Связь с преподавателем
  tutor   User @relation(name: "HomeworkTutor", fields: [tutorId], references: [id])
  tutorId Int

  student   User @relation(name: "HomeworkStudent", fields: [studentId], references: [id])
  studentId Int

  createdAt DateTime @default(now())
}

model Lessons {
  id            Int      @id @default(autoincrement())
  lessonDate    DateTime

  tutor         User     @relation(name: "TutorLesson", fields: [tutorId], references: [id]) // Репетитор
  tutorId       Int
  student       User     @relation(name: "StudentLesson", fields: [studentId], references: [id]) // Ученик
  studentId     Int
  lessonWas   Boolean  @default(false)

  createdAt     DateTime @default(now())

  @@unique([tutorId, studentId, lessonDate])
}
